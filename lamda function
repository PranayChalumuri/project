import json
import boto3
import urllib.parse  # For decoding URL-encoded form data
comprehend = boto3.client('comprehend')

def lambda_handler(event, context):
    try:
        mypage = page_router(event['httpMethod'], event['queryStringParameters'], event['body'])
        return mypage
    except Exception as e:
        return {
            'statusCode': 500,
            'body': json.dumps({'error': str(e)})
        }

def page_router(httpmethod, querystring, formbody):
    if httpmethod == 'GET':
        try:
            with open('contactus.html', 'r') as htmlFile:
                htmlContent = htmlFile.read()
            return {
                'statusCode': 200,
                'headers': {"Content-Type": "text/html"},
                'body': htmlContent
            }
        except Exception as e:
            return {
                'statusCode': 500,
                'body': json.dumps({'error': str(e)})
            }

    elif httpmethod == 'POST':
        try:
            # Decode and parse the input before inserting it
            clean_formbody = decode_and_parse_formdata(formbody)
            insert_record(clean_formbody)
            with open('success.html', 'r') as htmlFile:
                htmlContent = htmlFile.read()
            return {
                'statusCode': 200,
                'headers': {"Content-Type": "text/html"},
                'body': htmlContent
            }
        except Exception as e:
            return {
                'statusCode': 500,
                'body': json.dumps({'error': str(e)})
            }

def insert_record(formdata):
    """
    Inserts the parsed form data as a new item in the DynamoDB table.
    formdata: Dictionary containing the form data to insert.
    """
    dynamodb = boto3.resource('dynamodb')
    table = dynamodb.Table('pranaytable')
    
    sentiment_response = comprehend.detect_sentiment(
        Text=formdata['message'],  # Replace with the actual key for review text
        LanguageCode='en'  # Change as needed for different languages
    )
    
    # Extract sentiment and add to the formdata
    formdata['sentiment'] = sentiment_response['Sentiment']
    formdata['appName'] = formdata.get('appName', 'Unknown')
    
    # Insert the formdata dictionary directly into the DynamoDB table
    response = table.put_item(Item=formdata)
    
    return response

def decode_and_parse_formdata(formbody):
    """
    Decodes URL-encoded form data and converts it into a dictionary.
    This function also removes any non-ASCII characters from the values.
    """
    # First, decode the URL-encoded form data
    decoded_data = urllib.parse.unquote(formbody)
    decoded_data = decoded_data.replace('+',' ')
    
    # Parse the decoded form data into a dictionary
    formdata_pairs = decoded_data.split('&')  # Split key-value pairs
    formdata_dict = {}
    
    for pair in formdata_pairs:
        key, value = pair.split('=')
        # Optionally, clean the value to remove non-ASCII characters
        clean_value = ''.join([char for char in value if ord(char) < 128])
        formdata_dict[key] = clean_value
    
    return formdata_dict
